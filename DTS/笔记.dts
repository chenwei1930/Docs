// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
/*
 * Copyright (c) 2020 Rockchip Electronics Co., Ltd.
 */

/dts-v1/; //主意这一定要包含，才是一个dts文件，不然是编译不过，并且错误提示只说不能parse 。 dtsi文件是不保护这个
#include "rv1126.dtsi"//这个是芯片级别的文件
#include <dt-bindings/input/input.h>//输入文件

/ {
	model = "Rockchip RV1126 M8 LDS AI For Midea";
	compatible = "rockchip,rv1126-midea-m8-lds-ai", "rockchip,rv1126";
	chosen {
		bootargs = "console=ttyFIQ0 root=PARTUUID=614e0000-0000 rootwait";
	};

	rk809_sound: rk809-sound {//这是rk809音频相关
		compatible = "simple-audio-card";
		simple-audio-card,format = "i2s";
		simple-audio-card,name = "rockchip,rk809-codec";
		simple-audio-card,mclk-fs = <256>;
		simple-audio-card,cpu {
			sound-dai = <&i2s0_8ch>;
		};
		simple-audio-card,codec {
			sound-dai = <&rk809_codec>;
		};
	};

	sdio_pwrseq: sdio-pwrseq { //这是WiFi的sdio接口
		compatible = "mmc-pwrseq-simple";
		pinctrl-names = "default";
		pinctrl-0 = <&wifi_enable_h>;

		/*
		 * On the module itself this is one of these (depending
		 * on the actual card populated):
		 * - SDIO_RESET_L_WL_REG_ON
		 * - PDN (power down when low)
		 */
		reset-gpios = <&gpio0 RK_PA6 GPIO_ACTIVE_LOW>;
	};

	vcc5v0_sys: vccsys {//5v是系统电源
		compatible = "regulator-fixed";
		regulator-name = "vcc5v0_sys";
		regulator-always-on;
		regulator-boot-on;
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
	};

//VD_LOGIC: 包含一些外设的控制器和系统总线，比如：USB，EMMC，GMAC，SPI，I2C，EDP，VOP，AXI，AHB，APB 等
	vdd_logic: vdd_logic {//分立电源 。你要懂得啥是pmic啥是分立电影
		compatible = "regulator-fixed";
		regulator-name = "vdd_logic";
		regulator-always-on;
		regulator-boot-on;
		regulator-min-microvolt = <800000>;
		regulator-max-microvolt = <800000>;
	};

	wireless-bluetooth { //蓝牙
		compatible = "bluetooth-platdata";
		uart_rts_gpios = <&gpio1 RK_PC0 GPIO_ACTIVE_LOW>;//ok
		pinctrl-names = "default", "rts_gpio";
		pinctrl-0 = <&uart0_rtsn>;
		pinctrl-1 = <&uart0_rtsn_gpio>;
		BT,power_gpio    = <&gpio0 RK_PA7 GPIO_ACTIVE_HIGH>; //rset ok
		BT,wake_host_irq = <&gpio0 RK_PA5 GPIO_ACTIVE_HIGH>; //wake ok
		status = "okay";
	};

	wireless_wlan: wireless-wlan {//wifi
		compatible = "wlan-platdata";
		rockchip,grf = <&grf>;
		clocks = <&rk809 1>;
		clock-names = "clk_wifi";
		pinctrl-names = "default";
		pinctrl-0 = <&wifi_wake_host>;
		wifi_chip_type = "ap6236";
		/* WIFI,poweren_gpio = <&gpio0 RK_PA6 GPIO_ACTIVE_HIGH>; */
		WIFI,host_wake_irq = <&gpio0 RK_PB0 GPIO_ACTIVE_HIGH>;
		status = "okay";
	};
};

&cpu0 { //cpu调压
	cpu-supply = <&vdd_arm>;
};

&cpu_tsadc {//这是个cpu内部的温度计
	status = "okay";
};

&display_subsystem {//显示相关，就算你没有显示，也要开启，用来分配虽然没有显示，但用它来分配drm buffer
	status = "okay";
};

&csi_dphy0 { //摄像头相关
	status = "okay";

	ports {
		#address-cells = <1>;
		#size-cells = <0>;
		port@0 {
			reg = <0>;
			#address-cells = <1>;
			#size-cells = <0>;

			mipi_in_ucam0: endpoint@1 {
				reg = <1>;
				remote-endpoint = <&ucam_out0>;
				data-lanes = <1 2 3 4>;
			};
		};
		port@1 {
			reg = <1>;
			#address-cells = <1>;
			#size-cells = <0>;

			csidphy0_out: endpoint@0 {
				reg = <0>;
				remote-endpoint = <&mipi_csi2_input>;
			};
		};
	};
};

&fiq_debugger { //这个了，这个就是debuger口，并且这个开起来后，一定不要开uart2节点。二者冲突，会死机
	status = "okay";
};

//SoC 的外部供电主要分为 DCDC 和 LDO 两种：
//DCDC 一般是指开关电源，转换效率高，效率能达到~80%~90%，电流较大时，需要用 DCDC 提高电源效率；
//LDO 主要特点是输入电流等于输出电流，所以电源效率就等于输出电压/输入电压，假设输入3.8V，输出 1.0V，电源效率就是 1V/3.8V=26.3%, 电源效率低；
&i2c0 {  //pmic rk809是i2c读写寄存器
	status = "okay";
	clock-frequency = <400000>;

	rk809: pmic@20 {
		compatible = "rockchip,rk809";
		reg = <0x20>;
		interrupt-parent = <&gpio0>;
		interrupts = <9 IRQ_TYPE_LEVEL_LOW>;
		pinctrl-names = "default", "pmic-sleep",
			"pmic-power-off", "pmic-reset";
		pinctrl-0 = <&pmic_int>;
		pinctrl-1 = <&soc_slppin_gpio>, <&rk817_slppin_slp>;
		pinctrl-2 = <&soc_slppin_gpio>, <&rk817_slppin_pwrdn>;
		pinctrl-3 = <&soc_slppin_slp>, <&rk817_slppin_rst>;
		rockchip,system-power-controller;
		wakeup-source;
		#clock-cells = <1>;
		clock-output-names = "rk808-clkout1", "rk808-clkout2";
		/* 0: rst the pmic, 1: rst regs (default in codes) */
		pmic-reset-func = <0>;  //？？？

		vcc1-supply = <&vcc5v0_sys>;
		vcc2-supply = <&vcc5v0_sys>;
		vcc3-supply = <&vcc5v0_sys>;
		vcc4-supply = <&vcc5v0_sys>;
		vcc5-supply = <&vcc_buck5>;
		vcc6-supply = <&vcc_buck5>;
		vcc7-supply = <&vcc5v0_sys>;
		vcc8-supply = <&vcc3v3_sys>;
		vcc9-supply = <&vcc5v0_sys>;

		pwrkey {
			status = "okay";
		};

		pinctrl_rk8xx: pinctrl_rk8xx {
			gpio-controller;
			#gpio-cells = <2>;

			/omit-if-no-ref/
			rk817_slppin_null: rk817_slppin_null {
				pins = "gpio_slp";
				function = "pin_fun0";
			};

			/omit-if-no-ref/
			rk817_slppin_slp: rk817_slppin_slp {
				pins = "gpio_slp";
				function = "pin_fun1";
			};

			/omit-if-no-ref/
			rk817_slppin_pwrdn: rk817_slppin_pwrdn {
				pins = "gpio_slp";
				function = "pin_fun2";
			};

			/omit-if-no-ref/
			rk817_slppin_rst: rk817_slppin_rst {
				pins = "gpio_slp";
				function = "pin_fun3";
			};
		};

		regulators {

			vdd_npu: DCDC_REG1 {
				regulator-always-on;
				regulator-boot-on;
				regulator-min-microvolt = <725000>;
				regulator-max-microvolt = <1350000>;
				regulator-ramp-delay = <6001>;
				regulator-initial-mode = <0x2>;
				regulator-name = "vdd_npu";
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};

			vdd_arm: DCDC_REG2 { //OK+1 VDD_CORE/VDD_CPU/VDD_ARM 这三个名字是指同一个电源，即：ARM 核心的电源，主要从以下几个方面分析功耗
			///* 获取频率电压表, target这一列表示某个频率需求的电压 */ cat /sys/kernel/debug/opp/opp_summary
				regulator-always-on;
				regulator-boot-on;
				regulator-min-microvolt = <725000>;
				regulator-max-microvolt = <1350000>;
				regulator-ramp-delay = <6001>;
				regulator-initial-mode = <0x2>;
				regulator-name = "vdd_arm";
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
//VCC_DDR 主要是给 DDR 颗粒和 SoC 上 DDR-IO 部分供电，影响 VCC_DDR 功耗的参数有：DDR 频
//率，DDR 的负载，DDR 低功耗配置，DDR 颗粒类型等。相同条件下，不同厂商的 DDR 颗粒，功耗可
//能也会有很大的差异。
			vcc_ddr: DCDC_REG3 { //OK+1这个要注意修改为1.35v，
				regulator-always-on;
				regulator-boot-on;
				regulator-min-microvolt = <1350000>;
				regulator-max-microvolt = <1350000>;
				regulator-initial-mode = <0x2>;
				regulator-name = "vcc_ddr";
				regulator-state-mem {
					regulator-on-in-suspend;
					regulator-suspend-microvolt = <1350000>;
				};
			};

			vcc3v3_sys: DCDC_REG4 { //ok
				regulator-always-on;
				regulator-boot-on;
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-initial-mode = <0x2>;
				regulator-name = "vcc3v3_sys";
				regulator-state-mem {
					regulator-on-in-suspend;
					regulator-suspend-microvolt = <3300000>;
				};
			};

			vcc_buck5: DCDC_REG5 { //ok+1
				regulator-always-on;
				regulator-boot-on;
				regulator-min-microvolt = <2200000>;
				regulator-max-microvolt = <2200000>;
				regulator-name = "vcc_buck5";
				regulator-state-mem {
					regulator-on-in-suspend;
					regulator-suspend-microvolt = <2200000>;
				};
			};

			vcc_0v8: LDO_REG1 { //ok
				regulator-always-on;
				regulator-boot-on;
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <800000>;
				regulator-name = "vcc_0v8";
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};

			vcc1v8_pmu: LDO_REG2 { //ok
				regulator-always-on;
				regulator-boot-on;
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <1800000>;
				regulator-name = "vcc1v8_pmu";
				regulator-state-mem {
					regulator-on-in-suspend;
					regulator-suspend-microvolt = <1800000>;
				};
			};

			vcc0v8_pmu: LDO_REG3 { //ok
				regulator-always-on;
				regulator-boot-on;
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <800000>;
				regulator-name = "vcc0v8_pmu";
				regulator-state-mem {
					regulator-on-in-suspend;
					regulator-suspend-microvolt = <800000>;
				};
			};

			vcc_1v8: LDO_REG4 { //ok
				regulator-always-on;
				regulator-boot-on;
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <1800000>;
				regulator-name = "vcc_1v8";
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};

			vcc_dovdd: LDO_REG5 {//ok
				regulator-boot-on;
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <1800000>;
				regulator-name = "vcc_dovdd";
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};

			vcc_dvdd: LDO_REG6 {//ok
				regulator-min-microvolt = <1200000>;
				regulator-max-microvolt = <1200000>;
				regulator-name = "vcc_dvdd";
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};

			vcc_avdd: LDO_REG7 {//ok
				regulator-min-microvolt = <2800000>;
				regulator-max-microvolt = <2800000>;
				regulator-name = "vcc_avdd";
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};

			vccio_sd: LDO_REG8 {//这个无sd卡电源，关闭
				regulator-boot-on;
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <3300000>;
				regulator-name = "vccio_sd";
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};

			vcc3v3_sd: LDO_REG9 {//这个无sd卡电源，关闭
				regulator-boot-on;
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-name = "vcc3v3_sd";
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};

			vcc5v0_host: SWITCH_REG1 { //ok
				regulator-name = "vcc5v0_host";
			};

			vcc_3v3: SWITCH_REG2 {//ok
				regulator-always-on;
				regulator-boot-on;
				regulator-name = "vcc_3v3";
			};
		};

		rk809_codec: codec {  //音频相关
			#sound-dai-cells = <0>;
			compatible = "rockchip,rk809-codec", "rockchip,rk817-codec";
			clocks = <&cru MCLK_I2S0_TX_OUT2IO>;
			clock-names = "mclk";
			pinctrl-names = "default";
			assigned-clocks = <&cru MCLK_I2S0_TX_OUT2IO>;
			assigned-clock-parents = <&cru MCLK_I2S0_TX>;
			pinctrl-0 = <&i2s0m0_mclk>;
			hp-volume = <20>;
			spk-volume = <3>;
		};
	};
};

&i2c1 { //这个是摄像头相关的i2c总线
	status = "okay";
	clock-frequency = <400000>;

	os04a10: os04a10@36 {
		compatible = "ovti,os04a10";
		reg = <0x36>;
		clocks = <&cru CLK_MIPICSI_OUT>;
		clock-names = "xvclk";
		power-domains = <&power RV1126_PD_VI>;
		pinctrl-names = "rockchip,camera_default";
		pinctrl-0 = <&mipicsi_clk0>;
		avdd-supply = <&vcc_avdd>;
		dovdd-supply = <&vcc_dovdd>;
		dvdd-supply = <&vcc_dvdd>;
		pwdn-gpios = <&gpio1 RK_PD4 GPIO_ACTIVE_HIGH>;
		rockchip,camera-module-index = <1>;
		rockchip,camera-module-facing = "front";
		rockchip,camera-module-name = "CMK-OT1607-FV1";
		rockchip,camera-module-lens-name = "M12-40IRC-4MP-F16";
		//ir-cut = <&cam_ircut0>; 删除红外
		port {
			ucam_out0: endpoint {
				remote-endpoint = <&mipi_in_ucam0>;
				data-lanes = <1 2 3 4>;
			};
		};
	};
};

&mipi_csi2 { //摄像头mipi接口
	status = "okay";

	ports {
		#address-cells = <1>;
		#size-cells = <0>;

		port@0 {
			reg = <0>;
			#address-cells = <1>;
			#size-cells = <0>;

			mipi_csi2_input: endpoint@1 {
				reg = <1>;
				remote-endpoint = <&csidphy0_out>;
				data-lanes = <1 2 3 4>;
			};
		};

		port@1 {
			reg = <1>;
			#address-cells = <1>;
			#size-cells = <0>;

			mipi_csi2_output: endpoint@0 {
				reg = <0>;
				remote-endpoint = <&cif_mipi_in>;
				data-lanes = <1 2 3 4>;
			};
		};
	};
};

&mipi_dphy {
	status = "okay";
};

&mpp_srv { //mpp是rockchip的一种多媒体框架
	status = "okay";
};

&nandc {  //nand flash
	/delete-property/ pinctrl-names;
	/delete-property/ pinctrl-0;
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";
	nand@0 {
		reg = <0>;
		nand-bus-width = <8>;
		nand-ecc-mode = "hw";
		nand-ecc-strength = <16>;
		nand-ecc-step-size = <1024>;
	};
};

&npu { //加速使用的
	npu-supply = <&vdd_npu>;
	status = "okay";
};

&npu_tsadc {//加速使用的 adc
	status = "okay";
};

&pinctrl {  //相关的硬件引脚的初始化。这样有个好处，显示器
	pmic {
		/omit-if-no-ref/
		pmic_int: pmic_int {
			rockchip,pins =
				<0 RK_PB1 RK_FUNC_GPIO &pcfg_pull_up>;
		};

		/omit-if-no-ref/
		soc_slppin_gpio: soc_slppin_gpio {
			rockchip,pins =
				<0 RK_PB2 RK_FUNC_GPIO &pcfg_output_low>;
		};

		/omit-if-no-ref/
		soc_slppin_slp: soc_slppin_slp {
			rockchip,pins =
				<0 RK_PB2 RK_FUNC_1 &pcfg_pull_none>;
		};

		/omit-if-no-ref/
		soc_slppin_rst: soc_slppin_rst {
			rockchip,pins =
				<0 RK_PB2 RK_FUNC_2 &pcfg_pull_none>;
		};
	};

	sdio-pwrseq { //ok
		/omit-if-no-ref/
		wifi_enable_h: wifi-enable-h {
			rockchip,pins = <0 RK_PA6 RK_FUNC_GPIO &pcfg_pull_none>;
		};
	};

	wireless-wlan { //ok
		/omit-if-no-ref/
		wifi_wake_host: wifi-wake-host {
			rockchip,pins = <0 RK_PB0 0 &pcfg_pull_up>;
		};
	};
};

&pmu_io_domains { //ok，删除sd卡 这个就是cpu端的电源域
	status = "okay";

	pmuio0-supply = <&vcc1v8_pmu>;
	pmuio1-supply = <&vcc3v3_sys>;
//	vccio2-supply = <&vccio_sd>;
	vccio3-supply = <&vcc_1v8>;
	vccio4-supply = <&vcc_1v8>;
	vccio5-supply = <&vcc_3v3>;
	vccio6-supply = <&vcc_1v8>;
	vccio7-supply = <&vcc_1v8>;
};

&pwm0 {//PWM0_M1_LDS ,lds就是激光的意思。修改pwm1m1_pins_pull_down
	status = "okay";
	pinctrl-names = "active";
	pinctrl-0 = <&pwm0m1_pins_pull_down>;
};

&ramoops { //ramoops指的是采用ram保存oops信息的一个功能，
	status = "okay";
};

&rk_rga { //rga模块，就是一个2d图像的处理准备
	status = "okay";
};

&rkcif { //cif
	status = "okay";
};

&rkcif_mmu { //camera mmu
	status = "disabled";
};

&rkcif_mipi_lvds { //camera lvds接口
	status = "okay";

	port {
		/* MIPI CSI-2 endpoint */
		cif_mipi_in: endpoint {
			remote-endpoint = <&mipi_csi2_output>;
			data-lanes = <1 2 3 4>;
		};
	};
};

&rkcif_mipi_lvds_sditf { //camera lvds相关
	status = "okay";

	port {
		/* MIPI CSI-2 endpoint */
		mipi_lvds_sditf: endpoint {
			remote-endpoint = <&isp_in>;
			data-lanes = <1 2 3 4>;
		};
	};
};

&rkisp { //isp 图像处理相关
	status = "okay";
};

&rkisp_vir0 {  //isp 图像处理相关
	status = "okay";

	ports {
		port@0 {
			reg = <0>;
			#address-cells = <1>;
			#size-cells = <0>;

			isp_in: endpoint@0 {
				reg = <0>;
				remote-endpoint = <&mipi_lvds_sditf>;
			};
		};
	};
};

&rkisp_mmu { //isp 图像处理相关
	status = "disabled";
};

&rkispp {//isp 图像处理相关
	status = "okay";
	/* the max input w h and fps of mulit sensor */
	//max-input = <2688 1520 30>;
};

&rkispp_vir0 {//isp 图像处理相关
	status = "okay";
};

&rkispp_mmu {//isp 图像处理相关
	status = "okay";
};

&rkvdec { 
	status = "okay";
};

&rkvdec_mmu {
	status = "okay";
};

&rkvenc { //这个VDD_NPU_VEPU 是vepu和npu两个点连在一起来
	venc-supply = <&vdd_npu>;
	status = "okay";
};

&rkvenc_mmu {
	status = "okay";
};

&rng { //rng是随机数发生器
	status = "okay";
};

&rockchip_suspend {//和cpu休眠相关
	status = "okay";
	rockchip,sleep-debug-en = <1>;
	rockchip,sleep-mode-config = <
		(0
		| RKPM_SLP_ARMOFF
		| RKPM_SLP_PMU_PMUALIVE_32K
		| RKPM_SLP_PMU_DIS_OSC
		| RKPM_SLP_PMIC_LP
		)
	>;
	rockchip,wakeup-config = <
		(0
		| RKPM_GPIO_WKUP_EN
		)
	>;
};

&sdio { //配置wifi的sdio接口属性，经常修改
	max-frequency = <200000000>;
	bus-width = <4>;
	cap-sd-highspeed;
	cap-sdio-irq;
	keep-power-in-suspend;
	non-removable;
	rockchip,default-sample-phase = <90>;
	sd-uhs-sdr104;
	supports-sdio;
	mmc-pwrseq = <&sdio_pwrseq>;
	status = "okay";
};

&u2phy0 { //usb2.0 
	status = "okay";
	vup-gpios = <&gpio0 RK_PC1 GPIO_ACTIVE_LOW>;
	u2phy_otg: otg-port {
		status = "okay";
	};
};

&u2phy1 { //usb2.0 
	status = "okay";
	u2phy_host: host-port {
		status = "okay";
		phy-supply = <&vcc5v0_host>;
	};
};

&uart0 {//wifi SDIO AP6236
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_xfer &uart0_ctsn>;
	status = "okay";
};

&uart2 {//debug 注意了，如果你fiq关闭了，那么
	status = "disabled";
};

&uart3 {//Mainboard
	status = "okay";
};

&uart4 {//LDS 
	status = "okay";
};

&usb_host0_ehci {  
	status = "okay";
};

&usb_host0_ohci {
	status = "okay";
};

&usbdrd {
	status = "okay";
};

&usbdrd_dwc3 {
	status = "okay";
	extcon = <&u2phy0>;
};

&vdpu {
	status = "okay";
};

&vepu {  // MPP 支持的编码器硬件分为 vepu 系列和 rkvenc 系列，
	status = "okay";
};
//vepu 系列支持 H.264 编码，vp8 编码和jpeg 编码，配备于绝大多数 RK 芯片中。rkvenc 系列只支持 H.264 编码，目前只配备于 RV1109/RV1126Fuzhou Rockchip Electronics Co., Ltd.
//Rockchip Confidential  31/ 38系统芯片，其支持的编码功能相对于 vepu 系统会更多更强。

&vpu_mmu {
	status = "okay";
};

&vop {
	status = "okay";
};

&vop_mmu {
	status = "okay";
};